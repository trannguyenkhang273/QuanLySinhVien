/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.QLSV.Ui;

import com.QLSV.DAO.GiangVienDAO;
import com.QLSV.DAO.MonCuaGiangVienDAO;
import com.QLSV.DAO.MonHocDAO;
import com.QLSV.Model.GiangVien;
import com.QLSV.Model.MonCuaGiangVien;
import com.QLSV.Model.MonHoc;
import com.QLSV.Utility.MsgBox;
import com.QLSV.Utility.Other;
import java.awt.Color;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author Tho
 */
public class MonCuaGiangVienPane extends javax.swing.JPanel {

    /**
     * Creates new form MonCuaGiangVien
     */
    public MonCuaGiangVienPane() {
        initComponents();
        Other.setTable(tblLeft);
        Other.setTable(tblRight);
        init();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtTimKiem = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRight = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblLeft = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        cboGiangVien = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        btnNext = new javax.swing.JLabel();
        btnPrevious = new javax.swing.JLabel();
        cboNganh = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1180, 780));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(52, 31, 151));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("QUẢN LÝ MÔN HỌC CỦA GIẢNG VIÊN");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 1180, -1));

        txtTimKiem.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        txtTimKiem.setBorder(null);
        txtTimKiem.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtTimKiem.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtTimKiemKeyReleased(evt);
            }
        });
        add(txtTimKiem, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 130, 330, 30));

        tblRight.setAutoCreateRowSorter(true);
        tblRight.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblRight.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã môn", "Tên môn", "Mô tả"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblRight.setGridColor(new java.awt.Color(255, 255, 255));
        tblRight.setOpaque(false);
        tblRight.setRowHeight(20);
        tblRight.setSurrendersFocusOnKeystroke(true);
        tblRight.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRightMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblRight);

        add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(656, 212, 490, 500));

        tblLeft.setAutoCreateRowSorter(true);
        tblLeft.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tblLeft.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã môn", "Tên môn", "Mô tả"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLeft.setGridColor(new java.awt.Color(255, 255, 255));
        tblLeft.setOpaque(false);
        tblLeft.setRowHeight(20);
        tblLeft.setSurrendersFocusOnKeystroke(true);
        tblLeft.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLeftMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(tblLeft);

        add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 212, 460, 501));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        jLabel3.setText("Giảng viên :");
        add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 140, -1, -1));

        cboGiangVien.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        cboGiangVien.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cboGiangVien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboGiangVienActionPerformed(evt);
            }
        });
        add(cboGiangVien, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 140, 190, -1));

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/QLSV/Icon/barSearch.png"))); // NOI18N
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(73, 125, 460, -1));

        btnNext.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnNext.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/QLSV/Icon/next.png"))); // NOI18N
        btnNext.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnNext.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNextMouseClicked(evt);
            }
        });
        add(btnNext, new org.netbeans.lib.awtextra.AbsoluteConstraints(533, 328, 118, 71));

        btnPrevious.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnPrevious.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/QLSV/Icon/rewind_120px.png"))); // NOI18N
        btnPrevious.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnPrevious.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnPreviousMouseClicked(evt);
            }
        });
        add(btnPrevious, new org.netbeans.lib.awtextra.AbsoluteConstraints(533, 457, 118, -1));

        cboNganh.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        cboNganh.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ỨNG DỤNG PHẦN MỀM", "Thiết kế Website", "Lập trình Mobile" }));
        cboNganh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboNganhActionPerformed(evt);
            }
        });
        add(cboNganh, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 140, 190, -1));
    }// </editor-fold>//GEN-END:initComponents

    public void setColor(JLabel p) {
        p.setForeground(new Color(255, 250, 101));
    }

    public void resetColor(JLabel p1) {
        p1.setForeground(new Color(255, 255, 255));
    }
    private void cboGiangVienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboGiangVienActionPerformed
        // TODO add your handling code here:
        fillTableMonGV();
        filltableLeft();
    }//GEN-LAST:event_cboGiangVienActionPerformed

    private void tblLeftMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLeftMouseClicked
        // TODO add your handling code here:
        row= tblLeft.getSelectedRow();
        tblRight.clearSelection();
    }//GEN-LAST:event_tblLeftMouseClicked

    private void tblRightMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRightMouseClicked
        // TODO add your handling code here:
        rowRight= tblRight.getSelectedRow();
        tblLeft.clearSelection();
    }//GEN-LAST:event_tblRightMouseClicked

    private void btnNextMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNextMouseClicked
        // TODO add your handling code here:
        insert();
        tblLeft.clearSelection();
    }//GEN-LAST:event_btnNextMouseClicked

    private void btnPreviousMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnPreviousMouseClicked
        // TODO add your handling code here:
        delete();
        tblRight.clearSelection();
    }//GEN-LAST:event_btnPreviousMouseClicked

    private void cboNganhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboNganhActionPerformed
        // TODO add your handling code here:
        filllCboGiangVien();
    }//GEN-LAST:event_cboNganhActionPerformed

    private void txtTimKiemKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTimKiemKeyReleased
        DefaultTableModel model = (DefaultTableModel)tblLeft.getModel();
        try {
            TableRowSorter<DefaultTableModel> ts = new TableRowSorter<>(model);
            tblLeft.setRowSorter(ts);
            ts.setRowFilter(RowFilter.regexFilter(txtTimKiem.getText()));
//            tblGridView.setRowSelectionInterval(0, 0);
        } catch (Exception e) {
        }  
    }//GEN-LAST:event_txtTimKiemKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnNext;
    private javax.swing.JLabel btnPrevious;
    private javax.swing.JComboBox<String> cboGiangVien;
    private javax.swing.JComboBox<String> cboNganh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable tblLeft;
    private javax.swing.JTable tblRight;
    private javax.swing.JTextField txtTimKiem;
    // End of variables declaration//GEN-END:variables
    MonHocDAO dao = new MonHocDAO();
    int row = -1;
    int rowRight = -1;
    DefaultTableModel modelLeft ;
    DefaultTableModel modelRight ;
    GiangVienDAO gvdao = new GiangVienDAO();
    MonCuaGiangVienDAO mcgvdao = new MonCuaGiangVienDAO();
    
    void init(){
        fillComboBoxNganh();
        //filltableLeft();
        filllCboGiangVien();
    }
    
    private void filltableLeft(){
        Object magv = (Object) cboGiangVien.getSelectedItem();
        String asdasd = String.valueOf(magv);
        String[] parts = asdasd.split("-");
        String parts1 = parts[0];
        modelLeft = (DefaultTableModel) tblLeft.getModel();
        modelLeft.setRowCount(0);
        try {
            List<MonHoc> list = null;
            list = dao.selectNotInCourse(parts1);
            for(MonHoc n : list){
                Object row[] = {n.getMaMon(),n.getTenMon(),n.getMoTa()};
                modelLeft.addRow(row);
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
        }
    }
    
    void fillComboBoxNganh(){
        DefaultComboBoxModel cbomodel = (DefaultComboBoxModel) cboNganh.getModel();
        cbomodel.removeAllElements();
        List<GiangVien> list = gvdao.selectChuyenMoncuaGiangvien();
        for(GiangVien c: list){
            cbomodel.addElement(c.getChuyenMon());
        }
    }
    
    List<GiangVien> listcd;
    void filllCboGiangVien(){
        DefaultComboBoxModel cbomodel = (DefaultComboBoxModel) cboGiangVien.getModel();
        cbomodel.removeAllElements();
        //GiangVien gv = (GiangVien) cboNganh.getSelectedItem();
        String gv = (String) cboNganh.getSelectedItem();
        List<GiangVien> listcd = gvdao.selectChuyenMon(gv);
        for(GiangVien c: listcd){
            cbomodel.addElement(c);
        }
    }
    
    void fillTableMonGV(){
        Object magv = (Object) cboGiangVien.getSelectedItem();
        String asdasd = String.valueOf(magv);
        String[] parts = asdasd.split("-");
        String parts1 = parts[0];
        modelRight = (DefaultTableModel) tblRight.getModel();
        modelRight.setRowCount(0);
        List<MonCuaGiangVien> list = mcgvdao.selectMon(parts1);
        for(MonCuaGiangVien mcgv : list){
            try {
                List<MonHoc> listmcgv = null;
                listmcgv = dao.selectInCourse(mcgv.getMaMon());
                for(MonHoc n : listmcgv){
                    Object row[] = {n.getMaMon(),n.getTenMon(),n.getMoTa()};
                    modelRight.addRow(row);
            }
            } catch (Exception e) {
                MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            }
        }
    }
    
    void insert(){
        Object magv = (Object) cboGiangVien.getSelectedItem();
        String asdasd = String.valueOf(magv);
        String[] parts = asdasd.split("-");
        String parts1 = parts[0];
        try {
            if(tblLeft.getSelectedRow()==-1){
                MsgBox.alert(this, "Bạn chưa chọn môn");
            }else{
                for(int row : tblLeft.getSelectedRows()){
                    MonCuaGiangVien mcgv = new MonCuaGiangVien();
                    mcgv.setMaGiangVien(parts1);
                    mcgv.setMaMon((String) tblLeft.getValueAt(row, 0));
                    mcgvdao.insert(mcgv);
                    
                }
                fillTableMonGV();
                    filltableLeft();
            }
        } catch (Exception e) {
        }
    }
    
    void delete(){
        Object magv = (Object) cboGiangVien.getSelectedItem();
        String asdasd = String.valueOf(magv);
        String[] parts = asdasd.split("-");
        String parts1 = parts[0];
        try {
            if(tblRight.getSelectedRow()==-1){
                MsgBox.alert(this, "Bạn chưa chọn môn");
            }else{
                for(int row : tblRight.getSelectedRows()){
                    MonCuaGiangVien mcgv = new MonCuaGiangVien();
                    mcgv.setMaGiangVien(parts1);
                    mcgv.setMaMon((String) tblRight.getValueAt(row, 0));
                    mcgvdao.deleteGvMh(mcgv);
                }
                fillTableMonGV();
                filltableLeft();
            }
        } catch (Exception e) {
        }
    }
}
