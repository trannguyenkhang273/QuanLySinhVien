/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.QLSV.Ui;

import com.QLSV.DAO.DiemDAO;
import com.QLSV.DAO.LichGiangDayDAO;
import com.QLSV.DAO.LopDAO;
import com.QLSV.DAO.SinhVienDAO;
import com.QLSV.Model.Diem;
import com.QLSV.Model.Lop;
import com.QLSV.Model.LichGiangDay;
import com.QLSV.Utility.Auth;
import com.QLSV.Utility.MsgBox;
import com.QLSV.Utility.Other;
import com.QLSV.Utility.XImage;
import java.awt.Color;
import java.io.FileOutputStream;
import java.sql.SQLException;
import java.util.List;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.BorderStyle;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.CellType;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Tho
 */
public class NhapDiemFrame extends javax.swing.JFrame {

    /**
     * Creates new form NhapDiemFrame
     */
    public NhapDiemFrame() {
        initComponents();
        init();
        Other.setTable(tblNhapDiem);this.setIconImage(XImage.getAppIcon());
    }
    
    XSSFWorkbook workbook;
    JFileChooser chooser = new JFileChooser();

    private CellStyle headerCellStyle() {
        CellStyle cellStyle = workbook.createCellStyle();
        cellStyle.setAlignment(org.apache.poi.ss.usermodel.HorizontalAlignment.CENTER);
        cellStyle.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cellStyle.setBorderBottom(BorderStyle.THICK);
        cellStyle.setBorderLeft(BorderStyle.THICK);
        cellStyle.setBorderRight(BorderStyle.THICK);
        cellStyle.setBorderTop(BorderStyle.THICK);

        org.apache.poi.ss.usermodel.Font font = workbook.createFont();
        font.setBold(true);
        font.setFontName("Times New Roman");
        font.setFontHeight((short) 350);
        cellStyle.setFont(font);
        return cellStyle;
    }

    private CellStyle coCellStyle() {
        CellStyle cellStyle = workbook.createCellStyle();
        cellStyle.setAlignment(org.apache.poi.ss.usermodel.HorizontalAlignment.CENTER);
        cellStyle.setVerticalAlignment(org.apache.poi.ss.usermodel.VerticalAlignment.CENTER);
        cellStyle.setBorderBottom(BorderStyle.THIN);
        cellStyle.setBorderLeft(BorderStyle.THICK);
        cellStyle.setBorderRight(BorderStyle.THICK);
        cellStyle.setBorderTop(BorderStyle.THIN);

        org.apache.poi.ss.usermodel.Font font = workbook.createFont();
        font.setFontName("Times New Roman");
        font.setFontHeight((short) 250);
        cellStyle.setFont(font);
        return cellStyle;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnUpdate = new javax.swing.JLabel();
        btnSave = new javax.swing.JLabel();
        btnGuiMail = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblNhapDiem = new javax.swing.JTable();
        cboLop = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cboKy = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        cboMon = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        cboExcel = new javax.swing.JLabel();
        cboExcel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Quản lý điểm");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Quản lý điểm");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel2.setText("Mã lớp :");

        btnUpdate.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(255, 255, 255));
        btnUpdate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/QLSV/Icon/nutTuGiacTB.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnUpdate.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnUpdateMouseClicked(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnSave.setForeground(new java.awt.Color(255, 255, 255));
        btnSave.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/QLSV/Icon/nutTuGiac.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSaveMouseClicked(evt);
            }
        });

        btnGuiMail.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnGuiMail.setForeground(new java.awt.Color(255, 255, 255));
        btnGuiMail.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        btnGuiMail.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/QLSV/Icon/nutTuGiacTB.png"))); // NOI18N
        btnGuiMail.setText("Gmail");
        btnGuiMail.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnGuiMail.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnGuiMail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnGuiMailMouseClicked(evt);
            }
        });

        tblNhapDiem.setAutoCreateRowSorter(true);
        tblNhapDiem.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tblNhapDiem.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Tên sinh viên", "Điểm chuyên cần", "Điểm giữa kỳ", "Điểm cuối kỳ", "Điềm trung bình", "Trạng thái"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, true, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblNhapDiem.setOpaque(false);
        tblNhapDiem.setRowHeight(20);
        tblNhapDiem.setSurrendersFocusOnKeystroke(true);
        jScrollPane3.setViewportView(tblNhapDiem);

        cboLop.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        cboLop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboLopActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel5.setText("Kỳ:");

        cboKy.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        cboKy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboKyActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        jLabel6.setText("Môn học :");

        cboMon.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        cboMon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboMonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/QLSV/Icon/DangXuat.png"))); // NOI18N
        jLabel3.setText("Đổi mật khẩu");
        jLabel3.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jLabel3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel3MouseClicked(evt);
            }
        });

        cboExcel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboExcel.setForeground(new java.awt.Color(255, 255, 255));
        cboExcel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cboExcel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/QLSV/Icon/nutTuGiacTB.png"))); // NOI18N
        cboExcel.setText("Xuất Excel");
        cboExcel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cboExcel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cboExcel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboExcelMouseClicked(evt);
            }
        });

        cboExcel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        cboExcel1.setForeground(new java.awt.Color(255, 255, 255));
        cboExcel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cboExcel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/QLSV/Icon/nutTuGiacDai.png"))); // NOI18N
        cboExcel1.setText("Lên danh sách");
        cboExcel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cboExcel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cboExcel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboExcel1MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 418, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(192, 192, 192)
                .addComponent(jLabel3)
                .addGap(1, 1, 1))
            .addGroup(layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnSave)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnGuiMail, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78)
                                .addComponent(cboExcel, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(cboExcel1))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 970, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(50, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(35, 35, 35)
                                .addComponent(cboLop, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(47, 47, 47)
                        .addComponent(jLabel5)
                        .addGap(35, 35, 35)
                        .addComponent(cboKy, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel6)
                        .addGap(35, 35, 35)
                        .addComponent(cboMon, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(107, 107, 107))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(56, 56, 56)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cboLop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(cboKy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(cboMon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnUpdate)
                    .addComponent(btnGuiMail)
                    .addComponent(cboExcel)
                    .addComponent(cboExcel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cboLopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboLopActionPerformed
        // TODO add your handling code here:
        if (cboLop.getItemCount() == 0) {
            return;
        }
//        String lop = String.valueOf(cboLop.getSelectedItem());
//        if(l)
        fillCboKy();
    }//GEN-LAST:event_cboLopActionPerformed

    private void cboKyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboKyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cboKyActionPerformed

    private void btnSaveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSaveMouseClicked
        // TODO add your handling code here:
//        int row1 = tblNganh.getRowCount();
//        for(int i=0; i<row1;i++){
//            if(tblNganh.getValueAt(row1, 3)==null){
//                MsgBox.alert(this, "dm");
//            }
//        }
        if (cboLop.getItemCount() == 0) {
            return;
        }
        addDiem();
    }//GEN-LAST:event_btnSaveMouseClicked

    private void cboMonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboMonActionPerformed
        // TODO add your handling code here:
//        if(cboLop.getItemCount()==0||cboKy.getItemCount()==0){
//            return;
//        }
        filltTable();
    }//GEN-LAST:event_cboMonActionPerformed

    private void btnUpdateMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnUpdateMouseClicked
        // TODO add your handling code here:
//         for(int i=0;i<tblNganh.getRowCount();i++){
//            if(tblNganh.getValueAt(i, 2).toString().equals(null)||tblNganh.getValueAt(i, 2).toString().equals("")||tblNganh.getValueAt(i, 2).toString()==null){
//                MsgBox.alert(this,"K đc bỏ trống");
//                return;
//            }
//        }
        if (cboLop.getItemCount() == 0) {
            return;
        }
        updateTT();

    }//GEN-LAST:event_btnUpdateMouseClicked

    private void btnGuiMailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnGuiMailMouseClicked
        // TODO add your handling code here:
        if (cboLop.getItemCount() == 0) {
            return;
        }
        guiMail();
    }//GEN-LAST:event_btnGuiMailMouseClicked

    private void jLabel3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel3MouseClicked
        DoiMatKhauFrame dmkf =new DoiMatKhauFrame();
        dmkf.setVisible(true);// TODO add your handling code here: 
    }//GEN-LAST:event_jLabel3MouseClicked

    private void cboExcelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboExcelMouseClicked
        // TODO add your handling code here:
        if (cboLop.getItemCount() == 0) {
            return;
        }
        excel();
    }//GEN-LAST:event_cboExcelMouseClicked

    private void cboExcel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboExcel1MouseClicked
        LenDanhSachThiFrame ql;
        try {
            ql = new LenDanhSachThiFrame();ql.setVisible(true);
        } catch (SQLException ex) {
            Logger.getLogger(NhapDiemFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_cboExcel1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NhapDiemFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NhapDiemFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NhapDiemFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NhapDiemFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NhapDiemFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel btnGuiMail;
    private javax.swing.JLabel btnSave;
    private javax.swing.JLabel btnUpdate;
    private javax.swing.JLabel cboExcel;
    private javax.swing.JLabel cboExcel1;
    private javax.swing.JComboBox<String> cboKy;
    private javax.swing.JComboBox<String> cboLop;
    private javax.swing.JComboBox<String> cboMon;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblNhapDiem;
    // End of variables declaration//GEN-END:variables

    DiemDAO ddao = new DiemDAO();
    LichGiangDayDAO lgddao = new LichGiangDayDAO();
    LopDAO ldao = new LopDAO();
    SinhVienDAO svdao = new SinhVienDAO();
    String maNganh = "";
    float diemTB = 0;
    DefaultTableModel model;

    public void init() {
        getContentPane().setBackground(Color.white);
        fillCboLop();
    }

    void fillCboLop() {
        List<LichGiangDay> lgd = lgddao.selectLop(Auth.USERGV.getMaGiangVien());
        DefaultComboBoxModel cboModel = (DefaultComboBoxModel) cboLop.getModel();
        cboModel.removeAllElements();
        if(lgd.isEmpty()){
            MsgBox.alert(this, "Hiện tại bạn không dạy lớp nào!");
            return;
        }
        for (LichGiangDay lop : lgd) {
            
            cboModel.addElement(lop.getMaLop());
        }

        int tongLop= cboLop.getItemCount();
        
        String checkLopString= "";
        for(int i =0;i<tongLop;i++){
            cboLop.setSelectedIndex(i);
            cboLop.getSelectedItem();
            checkLopString = String.valueOf( cboLop.getSelectedItem());
            for(int j=i+1;j<tongLop;j++){
                cboLop.setSelectedIndex(j);
                cboLop.getSelectedItem();
                String malop = String.valueOf( cboLop.getSelectedItem());
                if(malop.equals(checkLopString)){
                    cboLop.setSelectedIndex(0);
                    cboLop.removeItemAt(j);
                    tongLop=tongLop-1;
                }
            }
        }
        cboLop.setSelectedIndex(0);

    }

    void fillCboMon() {
        try {
            String lop = (String) cboLop.getSelectedItem();
            int maky1 = (int) cboKy.getSelectedItem();
            List<LichGiangDay> lich = lgddao.selectMon(Auth.USERGV.getMaGiangVien(), lop, maky1, maNganh);
            DefaultComboBoxModel cboModel = (DefaultComboBoxModel) cboMon.getModel();
            cboModel.removeAllElements();
            for (LichGiangDay mon : lich) {
                cboModel.addElement(mon.getMaMon());
            }
        } catch (Exception e) {
            //MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            //e.printStackTrace();
        }
    }
//    
//    

    void fillCboKy() {
        DefaultComboBoxModel cboModel = (DefaultComboBoxModel) cboKy.getModel();
        String lop = (String) cboLop.getSelectedItem();
        Lop lophoc = ldao.selectByID(lop);
        cboModel.removeAllElements();
        try {
            cboModel.addElement(lophoc.getMaky());
            maNganh = lophoc.getMaNganh();
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            e.printStackTrace();
        }
        fillCboMon();
    }
//    

    void filltTable() {
        model = (DefaultTableModel) tblNhapDiem.getModel();
        model.setRowCount(0);
        try {
            String lop = (String) cboLop.getSelectedItem();
            String mon = (String) cboMon.getSelectedItem();
            List<Diem> list = ddao.selectSinhVien(mon, lop);
            for (Diem d : list) {
                if(d.getDiemChuyenCan()==-1||d.getDiemGiuaKi()==-1||d.getDiemCuoiKi()==-1){
                    Object row[] = {d.getMaSinhVien(), d.getTenSV(), d.getDiemChuyenCan()==-1?"":d.getDiemChuyenCan(), d.getDiemGiuaKi()==-1?"":d.getDiemGiuaKi(), d.getDiemCuoiKi()==-1?"":d.getDiemCuoiKi(), "", d.getTrangThai()==null?"":d.getTrangThai()};
                    model.addRow(row);
                }
                else{
                    diemTB = (d.getDiemChuyenCan()*2 + d.getDiemGiuaKi()*3 + d.getDiemCuoiKi()*5) / 10;
                    String fdiem = String.format("%.2f", diemTB);
                    diemTB = Float.parseFloat(fdiem);
                    Object row[] = {d.getMaSinhVien(), d.getTenSV(), d.getDiemChuyenCan(), d.getDiemGiuaKi(), d.getDiemCuoiKi(), fdiem, d.getTrangThai()==null?"":d.getTrangThai()};
                    model.addRow(row);
                }
                
            }
        } catch (Exception e) {
            MsgBox.alert(this, "Lỗi truy vấn dữ liệu!");
            e.printStackTrace();
        }
    }
//    

    void addDiem() {
//        for(int i=0;i<tblNganh.getRowCount();i++){
//            Float diem3 = (Float) tblNganh.getValueAt(i, 4);
//            Float diem1 = (Float) tblNganh.getValueAt(i, 2);
//            Float diem2 = (Float) tblNganh.getValueAt(i, 3);
//            String d1 =   String.valueOf(diem1);
//            String d2 =  String.valueOf(diem3);
//            String d3 =  String.valueOf(diem2);
//            System.out.println("a"+d1+"a");
//            if(d1.equals("")||d1==null||d1=="null"){
//                MsgBox.alert(this, "Không đc bỏ trống điểm!");
//                tblNganh.setRowSelectionInterval(i, i);
//                return;
//            }
//            if(d2.equals("")){
//                MsgBox.alert(this, "Không đc bỏ trống điểm!");
//                tblNganh.setRowSelectionInterval(i, i);
//                return;
//            }
//            if(diem3.equals("")){
//                MsgBox.alert(this, "Không đc bỏ trống điểm!");
//                tblNganh.setRowSelectionInterval(i, i);
//                return;
//            }            
//        }

        for (int i = 0; i < tblNhapDiem.getRowCount(); i++) {
            if(tblNhapDiem.getValueAt(i, 2).toString().equals("")){
            }
            else{
                try {
                    Float diem2 = Float.parseFloat(tblNhapDiem.getValueAt(i, 2).toString());
                    if (diem2 < 0 || diem2 > 10) {
                        MsgBox.alert(this, "Điểm không được bé hơn 0 va lớn hơn 10!");
                        return;
                    }
                } catch (Exception e) {
                    MsgBox.alert(this, "Điểm chỉ được nhập số!");
                    return;
                }
            }
            if(tblNhapDiem.getValueAt(i, 3).toString().equals("")){
            }
            else{
                try {
                    Float diem3 = Float.parseFloat(tblNhapDiem.getValueAt(i, 3).toString());
                    if (diem3 < 0 || diem3 > 10) {
                        MsgBox.alert(this, "Điểm không được bé hơn 0 va lớn hơn 10!");
                        return;
                    }
                } catch (Exception e) {
                    MsgBox.alert(this, "Điểm chỉ được nhập số!");
                    return;
                }
            }
            if(tblNhapDiem.getValueAt(i, 4).toString().equals("")){
            }
            else{
                try {
                    Float diem4 = Float.parseFloat(tblNhapDiem.getValueAt(i, 4).toString());
                    if (diem4 < 0 || diem4 > 10) {
                        MsgBox.alert(this, "Điểm không được bé hơn 0 va lớn hơn 10!");
                        return;
                    }
                } catch (Exception e) {
                    MsgBox.alert(this, "Điểm chỉ được nhập số!");
                    return;
                }
            }
            
//            Float diem = Float.parseFloat(tblNganh.getValueAt(i, 4).toString());
//            Float diem2 = Float.parseFloat(tblNganh.getValueAt(i, 3).toString());
//            if (diem < 0 || diem > 10) {
//                MsgBox.alert(this, "Điểm không được bé hơn 0 va lớn hơn 10!");
//                return;
//            }
//            if (diem1 < 0 || diem1 > 10) {
//                MsgBox.alert(this, "Điểm không được bé hơn 0 va lớn hơn 10!");
//                return;
//            }
//            if (diem2 < 0 || diem2 > 10) {
//                MsgBox.alert(this, "Điểm không được bé hơn 0 va lớn hơn 10!");
//                return;
//            }
        }

        try {
            for (int i = 0; i < tblNhapDiem.getRowCount(); i++) {
                String mon = (String) cboMon.getSelectedItem();
                String mahv = (String) tblNhapDiem.getValueAt(i, 0);

                
                Diem d = (Diem) ddao.selectSinhViendiem(mahv, mon);
//                float diem = -1;
//                float diem2 = -1;
//                float diem3 = -1;
                if(tblNhapDiem.getValueAt(i, 2).toString().equals("")){
                    d.setDiemChuyenCan(-1);
                }else{
                    Float diem1 = Float.parseFloat(tblNhapDiem.getValueAt(i, 2).toString());
                    d.setDiemChuyenCan(diem1);
                }
                if(tblNhapDiem.getValueAt(i, 3).toString().equals("")){
                    d.setDiemGiuaKi(-1);
                }else{
                    Float diem2 = Float.parseFloat(tblNhapDiem.getValueAt(i, 3).toString());
                     d.setDiemGiuaKi(diem2);
                }
                if(tblNhapDiem.getValueAt(i, 4).toString().equals("")){
                    int a =-1;
                    d.setDiemCuoiKi(a);
                }else{
                    Float diem = Float.parseFloat(tblNhapDiem.getValueAt(i, 4).toString());
                    d.setDiemCuoiKi(diem);
                }
               
                
                ddao.update(d);
            }
            MsgBox.alert(this, "Cập nhật thành công!");
            filltTable();
        } catch (Exception e) {
            MsgBox.alert(this, "Cập nhật thất bại!");
            e.printStackTrace();
        }
    }

    void updateTT() {
        for (int i = 0; i < tblNhapDiem.getRowCount(); i++) {
            String d1 = tblNhapDiem.getValueAt(i, 2).toString();
            String d2 = tblNhapDiem.getValueAt(i, 3).toString();
            String d3 = tblNhapDiem.getValueAt(i, 4).toString();
            String mon = (String) cboMon.getSelectedItem();
            String mahv = (String) tblNhapDiem.getValueAt(i, 0);
            Diem d = (Diem) ddao.selectSinhViendiem(mahv, mon);
            if (d1.equals("") || d1 == null || d1 == "null") {
                MsgBox.alert(this, "Bạn chưa nhập điểm đầy đủ!");
                tblNhapDiem.setRowSelectionInterval(i, i);
                d.setTrangThai("");
                ddao.update(d);
                filltTable();
                return;
            }
            if (d2.equals("") || d2 == null || d2 == "null") {
                MsgBox.alert(this, "Bạn chưa nhập điểm đầy đủ!");
                tblNhapDiem.setRowSelectionInterval(i, i);
                d.setTrangThai("");
                ddao.update(d);
                filltTable();
                return;
            }
            if (d3.equals("") || d3 == null || d3 == "null") {
                MsgBox.alert(this, "Bạn chưa nhập điểm đầy đủ!");
                tblNhapDiem.setRowSelectionInterval(i, i);
                d.setTrangThai("");
                ddao.update(d);
                filltTable();
                return;
            }
        }
        for (int i = 0; i < tblNhapDiem.getRowCount(); i++) {
            String mon = (String) cboMon.getSelectedItem();
            String mahv = (String) tblNhapDiem.getValueAt(i, 0);
            Diem d = (Diem) ddao.selectSinhViendiem(mahv, mon);
            float diemTrungBinh = Float.parseFloat(tblNhapDiem.getValueAt(i, 5).toString()) ;
            String trangThai = tblNhapDiem.getValueAt(i, 6).toString();
            if (diemTrungBinh < 5 && trangThai.equalsIgnoreCase("Học lại")) {
                d.setTrangThai("Rớt (1)");
            } else if (diemTrungBinh >= 5 && trangThai.equalsIgnoreCase("Học lại")) {
                d.setTrangThai("Đậu (1)");
            } else if (diemTrungBinh >= 5 && (trangThai.equalsIgnoreCase(""))) {
                d.setTrangThai("Đậu");
            } else if (diemTrungBinh >= 5 && (trangThai.equalsIgnoreCase("Đậu"))) {
                d.setTrangThai("Đậu");
            } else if (diemTrungBinh >= 5 && (trangThai.equalsIgnoreCase("Rớt"))) {
                d.setTrangThai("Đậu");
            }
            else if (diemTrungBinh < 5 && trangThai.equalsIgnoreCase("")) {
                d.setTrangThai("Rớt");
            }else if (diemTrungBinh < 5 && trangThai.equalsIgnoreCase("Đậu")) {
                d.setTrangThai("Rớt");
            }
            else if (diemTrungBinh < 5 && trangThai.equalsIgnoreCase("Rớt")) {
                d.setTrangThai("Rớt");
            }
            else {
                String tt = "";
                d.setTrangThai("");
                MsgBox.alert(this, "Bạn chưa chấm đầy đủ!");
                tblNhapDiem.setRowSelectionInterval(i, i);
            }
            ddao.update(d);
        }
        MsgBox.alert(this, "Cập nhật thành công!");
        filltTable();
    }
    
    void guiMail(){
        try {
            for(int row : tblNhapDiem.getSelectedRows()){
                String masv = tblNhapDiem.getValueAt(row, 0).toString();
                String hoten = tblNhapDiem.getValueAt(row, 1).toString();
                String Email = svdao.selectByID(masv).getEmail();
                String diemChuyenCan = tblNhapDiem.getValueAt(row, 2).toString();
                String diemGiuaKy = tblNhapDiem.getValueAt(row, 3).toString();
                String diemCuoiKy = tblNhapDiem.getValueAt(row, 4).toString();
                String diemTB = tblNhapDiem.getValueAt(row, 5).toString();
                String trangThai = tblNhapDiem.getValueAt(row, 6).toString();
                String lop = String.valueOf(cboLop.getSelectedItem());
                String mon = String.valueOf(cboMon.getSelectedItem());
                guiDiem(Email, masv, hoten, diemGiuaKy, diemCuoiKy,diemChuyenCan,lop,mon,trangThai);
                
            }
            JOptionPane.showMessageDialog(null, "Gửi điểm thành công", "Message", 
                javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
        }
    }
    
    void guiDiem(String Email,String MaNH,String tenNH, String diemGiuaKy,String diemCuoiKy,String DiemChuyenCan,String lop,String mon,String trangThai){
        try {
            Properties p = new Properties();
            p.put("mail.smtp.auth", "true");
            p.put("mail.smtp.starttls.enable", "true");
            p.put("mail.smtp.host", "smtp.gmail.com");
            p.put("mail.smtp.port", 587);
            String accountName = "trannguyenkhang147@gmail.com";
            String accountPassword = "01627987350a";
            Session s = Session.getInstance(p,
                    new javax.mail.Authenticator() {
                        protected javax.mail.PasswordAuthentication getPasswordAuthentication() {
                            return new javax.mail.PasswordAuthentication(accountName, accountPassword);
                        }});          
            String from = "trannguyenkhang147@gmail.com";
            String to = Email;
            String subject = "Trung tâm lập trình City";
            String body = "Thân gửi sinh viên: "+ tenNH +"\nMSSV: "+MaNH+"\n" 
                                    +"Phòng đào tạo gửi điểm thi của bạn  \n"
                                    + "Lớp "+ lop+ "\n" 
                                    +"Môn"+" : " + mon
                                    +"\n Điểm giữa kỳ: "+ diemGiuaKy
                                    +"\n Điểm cuối kỳ: "+ diemCuoiKy
                                    +"\n Điểm chuyên cần: "+ DiemChuyenCan
                                    +"\n Trạng thái: "+ trangThai
                                    +"\nNếu sinh viên có thắc mắc về điểm số của mình thì vui lòng liên hệ email: trannguyenkhang147@gmail.com";
            Message msg = new MimeMessage(s);
            msg.setFrom(new InternetAddress(from));
            msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to));
            msg.setSubject(subject);
            msg.setText(body);
            Transport.send(msg);
//            JOptionPane.showMessageDialog(null, "Mail was sent successfully.", "Message", 
//                    javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } catch (MessagingException ex) {
            Logger.getLogger(NhapDiemFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    void excel(){
        chooser.setDialogTitle ("Save as");
        FileNameExtensionFilter f = new FileNameExtensionFilter("xls", "xlsx");
        FileOutputStream out = null;

        chooser.setFileFilter (f);
        int excel = chooser.showSaveDialog(null);
        if (excel == JFileChooser.APPROVE_OPTION) {
            try {
                workbook = new XSSFWorkbook();
                XSSFSheet spreadsheet1 = workbook.createSheet("Điểm sinh viên");
                XSSFRow rows1 = null;
                Cell cells1 = null;
                CellStyle cs = headerCellStyle();
                CellStyle csc = coCellStyle();
                rows1 = spreadsheet1.createRow((short) 1);
                rows1.setHeight((short) 500);
                cells1 = rows1.createCell(0, CellType.STRING);
                cells1.setCellValue("Điểm sinh viên");
                rows1 = spreadsheet1.createRow((short) 2);
                rows1.setHeight((short) 500);
                cells1 = rows1.createCell(0, CellType.STRING);
                cells1.setCellValue("Mã sinh viên");
                cells1.setCellStyle(cs);
                cells1 = rows1.createCell(1, CellType.STRING);
                cells1.setCellValue("Tên sinh viên");
                cells1.setCellStyle(cs);
                cells1 = rows1.createCell(2, CellType.STRING);
                cells1.setCellValue("Điểm chuyên cần");
                cells1.setCellStyle(cs);
                cells1 = rows1.createCell(3, CellType.STRING);
                cells1.setCellValue("Điểm giữa kỳ");
                cells1.setCellStyle(cs);
                cells1 = rows1.createCell(4, CellType.STRING);
                cells1.setCellValue("Điểm cuối kỳ");
                cells1.setCellStyle(cs);
                cells1 = rows1.createCell(5, CellType.STRING);
                cells1.setCellValue("Điểm trung bình");
                cells1.setCellStyle(cs);
                cells1 = rows1.createCell(6, CellType.STRING);
                cells1.setCellValue("Trạng thái");
                cells1.setCellStyle(cs);
                int rowtong = tblNhapDiem.getRowCount();
                int tongrow = tblNhapDiem.getRowCount();
                for (int i = 0; i < tongrow; i++) {
                    rows1 = spreadsheet1.createRow((short) 3 + i);
                    rows1.setHeight((short) 500);
                    cells1 = rows1.createCell(0,CellType.STRING);
                    cells1.setCellValue(tblNhapDiem.getValueAt(i, 0).toString());
                    cells1.setCellStyle(csc);
                    cells1 = rows1.createCell(1,CellType.STRING);
                    cells1.setCellValue(tblNhapDiem.getValueAt(i, 1).toString());
                    cells1.setCellStyle(csc);
                    cells1 = rows1.createCell(2,CellType.STRING);
                    cells1.setCellValue(tblNhapDiem.getValueAt(i, 2).toString());
                    cells1.setCellStyle(csc);
                    cells1 = rows1.createCell(3,CellType.STRING);
                    cells1.setCellValue(tblNhapDiem.getValueAt(i, 3).toString());
                    cells1.setCellStyle(csc);
                    cells1 = rows1.createCell(4,CellType.STRING);
                    cells1.setCellValue(tblNhapDiem.getValueAt(i, 4).toString());
                    cells1.setCellStyle(csc);
                    cells1 = rows1.createCell(5,CellType.STRING);
                    cells1.setCellValue(tblNhapDiem.getValueAt(i, 5).toString());
                    cells1.setCellStyle(csc);
                    cells1 = rows1.createCell(6,CellType.STRING);
                    cells1.setCellValue(tblNhapDiem.getValueAt(i, 6).toString());
                    cells1.setCellStyle(csc);
                }
                for (int i = 0; i < 7; i++) {
                    spreadsheet1.autoSizeColumn(i);
                }
                out = new FileOutputStream(chooser.getSelectedFile() + ".xlsx");
                workbook.write(out);
                out.close();
                JOptionPane.showMessageDialog(this, "Xuất file thành công");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
//        else {
//            JOptionPane.showMessageDialog(this, "Vui lòng chọn ổ đĩa");
//        }
    }
}
